hydra_post(3)
=============

NAME
----
hydra_post - work with a single Hydra post

SYNOPSIS
--------
----
//  Create a new post
HYDRA_EXPORT hydra_post_t *
    hydra_post_new (char *subject);
    
//  Destroy the post
HYDRA_EXPORT void
    hydra_post_destroy (hydra_post_t **self_p);
    
//  Recalculate the post ID based on subject, timestamp, parent id, MIME
//  type, and content digest, and return post ID to caller.
HYDRA_EXPORT const char *
    hydra_post_ident (hydra_post_t *self);
    
//  Return the post subject, if set
HYDRA_EXPORT const char *
    hydra_post_subject (hydra_post_t *self);
    
//  Return the post timestamp
HYDRA_EXPORT const char *
    hydra_post_timestamp (hydra_post_t *self);
    
//  Return the post parent id, or empty string if not set
HYDRA_EXPORT const char *
    hydra_post_parent_id (hydra_post_t *self);
    
//  Return the post MIME type, if set
HYDRA_EXPORT const char *
    hydra_post_mime_type (hydra_post_t *self);
    
//  Return the post content digest
HYDRA_EXPORT const char *
    hydra_post_digest (hydra_post_t *self);

//  Return the post content location
HYDRA_EXPORT const char *
    hydra_post_location (hydra_post_t *self);
    
//  Return the post content size
HYDRA_EXPORT size_t
    hydra_post_content_size (hydra_post_t *self);
    
//  Set the post parent id, which must be a valid post ID
HYDRA_EXPORT void
    hydra_post_set_parent_id (hydra_post_t *self, const char *parent_id);
    
//  Set the post MIME type
HYDRA_EXPORT void
    hydra_post_set_mime_type (hydra_post_t *self, const char *mime_type);
    
//  Set the post content to a text string. Recalculates the post digest from
//  from the new content value. Sets the MIME type to text/plain.
HYDRA_EXPORT void
    hydra_post_set_content (hydra_post_t *self, const char *content);
    
//  Set the post content to a chunk of data. Recalculates the post digest
//  from the chunk contents. Takes ownership of the chunk. The data is not
//  stored on disk until you call hydra_post_save.
HYDRA_EXPORT void
    hydra_post_set_data (hydra_post_t *self, const void *data, size_t size);
    
//  Set the post content to point to a specified file. The file must exist.
//  Recalculates the post digest from the file contents. Returns 0 if OK, -1
//  if the file was unreadable.
HYDRA_EXPORT int
    hydra_post_set_file (hydra_post_t *self, const char *location);
    
//  Save the post to disk under the specified filename. Returns 0 if OK, -1
//  if the file could not be created. Posts are always stored in the "posts"
//  subdirectory of the current working directory.
HYDRA_EXPORT int
    hydra_post_save (hydra_post_t *self, const char *filename);

//  Load post from the specified filename. Posts are always read from the
//  "posts" subdirectory of the current working directory. Returns a new post
//  instance if the file could be loaded, else returns null.
HYDRA_EXPORT hydra_post_t *
    hydra_post_load (const char *filename);
    
//  Fetch a chunk of content for the post. The caller specifies the size and
//  offset of the chunk. A size of 0 means all content, which will fail if
//  there is insufficient memory available. The caller must destroy the chunk
//  when finished with it.
HYDRA_EXPORT zchunk_t *
    hydra_post_fetch (hydra_post_t *self, size_t size, size_t offset);
    
//  Encode a post metadata to a hydra_proto message
HYDRA_EXPORT void
    hydra_post_encode (hydra_post_t *self, hydra_proto_t *proto);

//  Create a new post from a hydra_proto HEADER-OK message.
HYDRA_EXPORT hydra_post_t *
    hydra_post_decode (hydra_proto_t *proto);

//  Duplicate a post instance. Does not create a new post on disk; this
//  provides a second instance of the same post item.
HYDRA_EXPORT hydra_post_t *
    hydra_post_dup (hydra_post_t *self);

//  Print the post file to stdout
HYDRA_EXPORT void
    hydra_post_print (hydra_post_t *self);
    
//  Self test of this class
HYDRA_EXPORT int
    hydra_post_test (bool verbose);
----

DESCRIPTION
-----------

Work with a Hydra post in memory.

TODO
- add sender_id property indicating which peer, if any, sent us the post

EXAMPLE
-------
.From hydra_post_test method
----
//  Simple create/destroy test
zsys_dir_create (".hydra_test");
zsys_dir_change (".hydra_test");
    
hydra_post_t *post = hydra_post_new ("Test post");
assert (post);
hydra_post_set_content (post, "Hello, World");
assert (streq (hydra_post_mime_type (post), "text/plain"));
int rc = hydra_post_save (post, "testpost");
assert (rc == 0);
hydra_post_destroy (&post);

post = hydra_post_load ("testpost");
assert (post);
assert (hydra_post_content_size (post) == 12);
if (verbose)
    hydra_post_print (post);
zchunk_t *chunk = hydra_post_fetch (
    post, hydra_post_content_size (post), 0);
assert (chunk);
assert (zchunk_size (chunk) == 12);
zchunk_destroy (&chunk);

hydra_post_t *copy = hydra_post_dup (post);
assert (streq (hydra_post_ident (copy), hydra_post_ident (post)));
hydra_post_destroy (&post);

//  Delete the test directory
zsys_dir_change ("..");
zdir_t *dir = zdir_new (".hydra_test", NULL);
assert (dir);
zdir_remove (dir, true);
zdir_destroy (&dir);
----
