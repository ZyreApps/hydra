#### hydra_client - Hydra Client

This is a simple client API for the Hydra protocol.

Generated by zproto and implements a background actor that manages the
connection to the Hydra server.

This is the class interface:

    //  Create a new hydra_client
    //  Connect to server endpoint, with specified timeout in msecs (zero means wait    
    //  forever). Constructor succeeds if connection is successful.                     
    hydra_client_t *
        hydra_client_new (const char *endpoint, int timeout);
    
    //  Destroy the hydra_client
    void
        hydra_client_destroy (hydra_client_t **self_p);
    
    //  Enable verbose logging of client activity
    void
        hydra_client_verbose (hydra_client_t *self);
    
    //  Return actor for low-level command control and polling
    zactor_t *
        hydra_client_actor (hydra_client_t *self);
    
    //  Get list of tags from peer                                                      
    //  Returns >= 0 if successful, -1 if interrupted.
    int
        hydra_client_get_tags (hydra_client_t *self);
    
    //  Fetch latest post for a given tag                                               
    //  Returns >= 0 if successful, -1 if interrupted.
    int
        hydra_client_get_tag (hydra_client_t *self, const char *tag);
    
    //  Fetch a specific post byt ID                                                    
    //  Returns >= 0 if successful, -1 if interrupted.
    int
        hydra_client_get_post (hydra_client_t *self, const char *post_id);
    
    //  Return last received status
    int 
        hydra_client_status (hydra_client_t *self);
    
    //  Return last received reason
    char *
        hydra_client_reason (hydra_client_t *self);
    
    //  Return last received tags
    char *
        hydra_client_tags (hydra_client_t *self);
    
    //  Return last received tag
    char *
        hydra_client_tag (hydra_client_t *self);
    
    //  Return last received post_id
    char *
        hydra_client_post_id (hydra_client_t *self);
    
    //  Return last received reply_to
    char *
        hydra_client_reply_to (hydra_client_t *self);
    
    //  Return last received previous
    char *
        hydra_client_previous (hydra_client_t *self);
    
    //  Return last received timestamp
    int 
        hydra_client_timestamp (hydra_client_t *self);
    
    //  Return last received type
    char *
        hydra_client_type (hydra_client_t *self);
    
    //  Return last received content
    char *
        hydra_client_content (hydra_client_t *self);
    
    //  Self test of this class
    void
        hydra_client_test (bool verbose);

This is the class self test code:

    //  Start a server to test against, and bind to endpoint
    zactor_t *server = zactor_new (hydra_server, "hydra_client_test");
    if (verbose)
        zstr_send (server, "VERBOSE");
    zstr_sendx (server, "BIND", "ipc://@/hydra", NULL);
    
    hydra_client_t *client = hydra_client_new ("ipc://@/hydra", 500);
    if (verbose)
        hydra_client_verbose (client);
    hydra_client_get_tags (client);
    hydra_client_destroy (&client);
    
    zactor_destroy (&server);

