#### hydra_msg - The Hydra Protocol

hydra_msg - The Hydra Protocol

Please add @discuss section in ../src/hydra_msg.c.

This is the class interface:

    //  Create a new empty hydra_msg
    hydra_msg_t *
        hydra_msg_new (void);
    
    //  Destroy a hydra_msg instance
    void
        hydra_msg_destroy (hydra_msg_t **self_p);
    
    //  Receive a hydra_msg from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting.
    int
        hydra_msg_recv (hydra_msg_t *self, zsock_t *input);
    
    //  Send the hydra_msg to the output socket, does not destroy it
    int
        hydra_msg_send (hydra_msg_t *self, zsock_t *output);
        
    //  Print contents of message to stdout
    void
        hydra_msg_print (hydra_msg_t *self);
    
    //  Get/set the message routing id
    zframe_t *
        hydra_msg_routing_id (hydra_msg_t *self);
    void
        hydra_msg_set_routing_id (hydra_msg_t *self, zframe_t *routing_id);
    
    //  Get the hydra_msg id and printable command
    int
        hydra_msg_id (hydra_msg_t *self);
    void
        hydra_msg_set_id (hydra_msg_t *self, int id);
    const char *
        hydra_msg_command (hydra_msg_t *self);
    
    //  Get/set the post_id field
    const char *
        hydra_msg_post_id (hydra_msg_t *self);
    void
        hydra_msg_set_post_id (hydra_msg_t *self, const char *value);
    
    //  Get/set the tags field
    const char *
        hydra_msg_tags (hydra_msg_t *self);
    void
        hydra_msg_set_tags (hydra_msg_t *self, const char *value);
    
    //  Get/set the tag field
    const char *
        hydra_msg_tag (hydra_msg_t *self);
    void
        hydra_msg_set_tag (hydra_msg_t *self, const char *value);
    
    //  Get/set the reply_to field
    const char *
        hydra_msg_reply_to (hydra_msg_t *self);
    void
        hydra_msg_set_reply_to (hydra_msg_t *self, const char *value);
    
    //  Get/set the previous field
    const char *
        hydra_msg_previous (hydra_msg_t *self);
    void
        hydra_msg_set_previous (hydra_msg_t *self, const char *value);
    
    //  Get/set the timestamp field
    uint64_t
        hydra_msg_timestamp (hydra_msg_t *self);
    void
        hydra_msg_set_timestamp (hydra_msg_t *self, uint64_t timestamp);
    
    //  Get/set the type field
    const char *
        hydra_msg_type (hydra_msg_t *self);
    void
        hydra_msg_set_type (hydra_msg_t *self, const char *value);
    
    //  Get/set the content field
    const char *
        hydra_msg_content (hydra_msg_t *self);
    void
        hydra_msg_set_content (hydra_msg_t *self, const char *value);
    
    //  Get/set the reason field
    const char *
        hydra_msg_reason (hydra_msg_t *self);
    void
        hydra_msg_set_reason (hydra_msg_t *self, const char *value);
    
    //  Self test of this class
    int
        hydra_msg_test (bool verbose);

This is the class self test code:

    //  Simple create/destroy test
    hydra_msg_t *self = hydra_msg_new ();
    assert (self);
    hydra_msg_destroy (&self);
    
    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-hydra_msg");
    
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-hydra_msg");
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = hydra_msg_new ();
    hydra_msg_set_id (self, HYDRA_MSG_HELLO);
    
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
    }
    hydra_msg_set_id (self, HYDRA_MSG_HELLO_OK);
    
    hydra_msg_set_post_id (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_post_id (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_TAGS);
    
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_TAGS_OK);
    
    hydra_msg_set_tags (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_tags (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_TAG);
    
    hydra_msg_set_tag (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_tag (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_TAG_OK);
    
    hydra_msg_set_tag (self, "Life is short but Now lasts for ever");
    hydra_msg_set_post_id (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_tag (self), "Life is short but Now lasts for ever"));
        assert (streq (hydra_msg_post_id (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_POST);
    
    hydra_msg_set_post_id (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_post_id (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GET_POST_OK);
    
    hydra_msg_set_post_id (self, "Life is short but Now lasts for ever");
    hydra_msg_set_reply_to (self, "Life is short but Now lasts for ever");
    hydra_msg_set_previous (self, "Life is short but Now lasts for ever");
    hydra_msg_set_tags (self, "Life is short but Now lasts for ever");
    hydra_msg_set_timestamp (self, 123);
    hydra_msg_set_type (self, "Life is short but Now lasts for ever");
    hydra_msg_set_content (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_post_id (self), "Life is short but Now lasts for ever"));
        assert (streq (hydra_msg_reply_to (self), "Life is short but Now lasts for ever"));
        assert (streq (hydra_msg_previous (self), "Life is short but Now lasts for ever"));
        assert (streq (hydra_msg_tags (self), "Life is short but Now lasts for ever"));
        assert (hydra_msg_timestamp (self) == 123);
        assert (streq (hydra_msg_type (self), "Life is short but Now lasts for ever"));
        assert (streq (hydra_msg_content (self), "Life is short but Now lasts for ever"));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GOODBYE);
    
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
    }
    hydra_msg_set_id (self, HYDRA_MSG_GOODBYE_OK);
    
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
    }
    hydra_msg_set_id (self, HYDRA_MSG_INVALID);
    
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
    }
    hydra_msg_set_id (self, HYDRA_MSG_FAILED);
    
    hydra_msg_set_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    hydra_msg_send (self, output);
    hydra_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        hydra_msg_destroy (&self);
        self = hydra_msg_new ();
        hydra_msg_recv (self, input);
        assert (hydra_msg_routing_id (self));
        assert (streq (hydra_msg_reason (self), "Life is short but Now lasts for ever"));
    }
    
    zsock_destroy (&input);
    zsock_destroy (&output);

