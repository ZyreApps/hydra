/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#ifndef QML_HYDRA_POST_H
#define QML_HYDRA_POST_H

#include <QtQml>

#include <hydra.h>
#include "qml_hydra_plugin.h"


class QmlHydraPost : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool isNULL READ isNULL)
    
public:
    hydra_post_t *self;
    
    QmlHydraPost() { self = NULL; }
    bool isNULL() { return self == NULL; }
    
    static QObject* qmlAttachedProperties(QObject* object); // defined in QmlHydraPost.cpp
    
public slots:
    //  Recalculate the post ID based on subject, timestamp, parent id, MIME
    //  type, and content digest, and return post ID to caller.             
    const QString ident ();

    //  Return the post subject, if set
    const QString subject ();

    //  Return the post timestamp
    const QString timestamp ();

    //  Return the post parent id, or empty string if not set
    const QString parentId ();

    //  Return the post MIME type, if set
    const QString mimeType ();

    //  Return the post content digest
    const QString digest ();

    //  Return the post content location
    const QString location ();

    //  Return the post content size
    size_t contentSize ();

    //  Return the post content as a string. Returns NULL if the MIME type is      
    //  not "text/plain". The caller must destroy the string when finished with it.
    QString content ();

    //  Set the post parent id, which must be a valid post ID
    void setParentId (const QString &parentId);

    //  Set the post MIME type
    void setMimeType (const QString &mimeType);

    //  Set the post content to a text string. Recalculates the post digest from
    //  from the new content value. Sets the MIME type to text/plain.           
    void setContent (const QString &content);

    //  Set the post content to a chunk of data. Recalculates the post digest 
    //  from the chunk contents. Takes ownership of the chunk. The data is not
    //  stored on disk until you call hydra_post_save.                        
    void setData (const void *data, size_t size);

    //  Set the post content to point to a specified file. The file must exist. 
    //  Recalculates the post digest from the file contents. Returns 0 if OK, -1
    //  if the file was unreadable.                                             
    int setFile (const QString &location);

    //  Save the post to disk under the specified filename. Returns 0 if OK, -1 
    //  if the file could not be created. Posts are always stored in the "posts"
    //  subdirectory of the current working directory.                          
    int save (const QString &filename);

    //  Fetch a chunk of content for the post. The caller specifies the size and 
    //  offset of the chunk. A size of 0 means all content, which will fail if   
    //  there is insufficient memory available. The caller must destroy the chunk
    //  when finished with it.                                                   
    zchunk_t *fetch (size_t size, size_t offset);

    //  Encode a post metadata to a hydra_proto message
    void encode (hydra_proto_t *proto);

    //  Duplicate a post instance. Does not create a new post on disk; this
    //  provides a second instance of the same post item.                  
    QmlHydraPost *dup ();

    //  Print the post file to stdout
    void print ();
};

class QmlHydraPostAttached : public QObject
{
    Q_OBJECT
    QObject* m_attached;
    
public:
    QmlHydraPostAttached (QObject* attached) {
        Q_UNUSED (attached);
    };
    
public slots:
    //  Load post from the specified filename. Posts are always read from the    
    //  "posts" subdirectory of the current working directory. Returns a new post
    //  instance if the file could be loaded, else returns null.                 
    QmlHydraPost *load (const QString &filename);

    //  Create a new post from a hydra_proto HEADER-OK message.
    QmlHydraPost *decode (hydra_proto_t *proto);

    //  Self test of this class
    void test (bool verbose);

    //  Create a new post
    QmlHydraPost *construct (const QString &subject);

    //  Destroy the post
    void destruct (QmlHydraPost *qmlSelf);
};


QML_DECLARE_TYPEINFO(QmlHydraPost, QML_HAS_ATTACHED_PROPERTIES)

#endif
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
