################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module Hydra
  module FFI
    
    # work with Hydra ledger of posts
    class Ledger
      class DestroyedError < RuntimeError; end
      
      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if finalize
          @finalizer = self.class.send :create_finalizer_for, @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::Hydra::FFI.hydra_ledger_destroy ptr_ptr
        end
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end
      
      # Create a new empty ledger instance.
      def self.new
        ptr = ::Hydra::FFI.hydra_ledger_new
        
        __new ptr
      end
      
      # Destroy the ledger
      def destroy
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::Hydra::FFI.hydra_ledger_destroy self_p
        result
      end
      
      # Return ledger size, i.e. number of posts stored in the ledger.
      def size
        raise DestroyedError unless @ptr
        result = ::Hydra::FFI.hydra_ledger_size @ptr
        result
      end
      
      # Load the ledger data from disk, from the specified directory. Returns 
      # the number of posts loaded, or -1 if there was an error reading the   
      # directory.                                                            
      def load
        raise DestroyedError unless @ptr
        result = ::Hydra::FFI.hydra_ledger_load @ptr
        result
      end
      
      # Save a post via the ledger. This saves the post to disk, adds the post
      # to the ledger, and then destroys the post. Use in place of            
      # hydra_post_save to ensure post filenames are correctly generated.     
      def store post_p
        raise DestroyedError unless @ptr
        post_p = post_p.__ptr if post_p
        result = ::Hydra::FFI.hydra_ledger_store @ptr, post_p
        result
      end
      
      # Return post at specified index; if the index does not refer to a valid
      # post, returns NULL.                                                   
      def fetch index
        raise DestroyedError unless @ptr
        index = Integer(index)
        result = ::Hydra::FFI.hydra_ledger_fetch @ptr, index
        result = Post.__new result, true
        result
      end
      
      # Lookup post in ledger and return post index (0 .. size - 1); if the post
      # does not exist, returns -1.                                             
      def index post_id
        raise DestroyedError unless @ptr
        post_id = String(post_id)
        result = ::Hydra::FFI.hydra_ledger_index @ptr, post_id
        result
      end
      
      # Self test of this class
      def self.test verbose
        verbose = !(0==verbose||!verbose) # boolean
        result = ::Hydra::FFI.hydra_ledger_test verbose
        result
      end
    end
    
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
