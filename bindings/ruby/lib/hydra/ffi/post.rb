################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module Hydra
  module FFI
    
    # Main Hydra API
    class Post
      class DestroyedError < RuntimeError; end
      
      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if finalize
          @finalizer = self.class.send :create_finalizer_for, @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          Hydra::FFI.hydra_post_destroy ptr_ptr
        end
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end
      
      # Create a new post
      def self.new subject
        subject = String(subject)
        ptr = Hydra::FFI.hydra_post_new subject
        
        __new ptr
      end
      
      # Destroy the post
      def destroy
        return unless @ptr
        self_p = self_p.__ptr_give_ref
        result = Hydra::FFI.hydra_post_destroy self_p
        result
      end
      
      # Recalculate the post ID based on subject, timestamp, parent id, MIME
      # type, and content digest, and return post ID to caller.             
      def ident
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_ident @ptr
        result
      end
      
      # Return the post subject, if set
      def subject
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_subject @ptr
        result
      end
      
      # Return the post timestamp
      def timestamp
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_timestamp @ptr
        result
      end
      
      # Return the post parent id, or empty string if not set
      def parent_id
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_parent_id @ptr
        result
      end
      
      # Return the post MIME type, if set
      def mime_type
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_mime_type @ptr
        result
      end
      
      # Return the post content digest
      def digest
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_digest @ptr
        result
      end
      
      # Return the post content location
      def location
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_location @ptr
        result
      end
      
      # Return the post content size
      def content_size
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_content_size @ptr
        result
      end
      
      # Return the post content as a string. Returns NULL if the MIME type is      
      # not "text/plain". The caller must destroy the string when finished with it.
      def content
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_content @ptr
        result
      end
      
      # Set the post parent id, which must be a valid post ID
      def set_parent_id parent_id
        raise DestroyedError unless @ptr
        parent_id = String(parent_id)
        result = Hydra::FFI.hydra_post_set_parent_id @ptr, parent_id
        result
      end
      
      # Set the post MIME type
      def set_mime_type mime_type
        raise DestroyedError unless @ptr
        mime_type = String(mime_type)
        result = Hydra::FFI.hydra_post_set_mime_type @ptr, mime_type
        result
      end
      
      # Set the post content to a text string. Recalculates the post digest from
      # from the new content value. Sets the MIME type to text/plain.           
      def set_content content
        raise DestroyedError unless @ptr
        content = String(content)
        result = Hydra::FFI.hydra_post_set_content @ptr, content
        result
      end
      
      # Set the post content to a chunk of data. Recalculates the post digest 
      # from the chunk contents. Takes ownership of the chunk. The data is not
      # stored on disk until you call hydra_post_save.                        
      def set_data data, size
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_set_data @ptr, data, size
        result
      end
      
      # Set the post content to point to a specified file. The file must exist. 
      # Recalculates the post digest from the file contents. Returns 0 if OK, -1
      # if the file was unreadable.                                             
      def set_file location
        raise DestroyedError unless @ptr
        location = String(location)
        result = Hydra::FFI.hydra_post_set_file @ptr, location
        result
      end
      
      # Save the post to disk under the specified filename. Returns 0 if OK, -1 
      # if the file could not be created. Posts are always stored in the "posts"
      # subdirectory of the current working directory.                          
      def save filename
        raise DestroyedError unless @ptr
        filename = String(filename)
        result = Hydra::FFI.hydra_post_save @ptr, filename
        result
      end
      
      # Load post from the specified filename. Posts are always read from the    
      # "posts" subdirectory of the current working directory. Returns a new post
      # instance if the file could be loaded, else returns null.                 
      def self.load filename
        filename = String(filename)
        result = Hydra::FFI.hydra_post_load filename
        result = Post.__new result, true
        result
      end
      
      # Fetch a chunk of content for the post. The caller specifies the size and 
      # offset of the chunk. A size of 0 means all content, which will fail if   
      # there is insufficient memory available. The caller must destroy the chunk
      # when finished with it.                                                   
      def fetch size, offset
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_fetch @ptr, size, offset
        result
      end
      
      # Encode a post metadata to a hydra_proto message
      def encode proto
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_encode @ptr, proto
        result
      end
      
      # Create a new post from a hydra_proto HEADER-OK message.
      def self.decode proto
        result = Hydra::FFI.hydra_post_decode proto
        result = Post.__new result, true
        result
      end
      
      # Duplicate a post instance. Does not create a new post on disk; this
      # provides a second instance of the same post item.                  
      def dup
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_dup @ptr
        result = Post.__new result, true
        result
      end
      
      # Print the post file to stdout
      def print
        raise DestroyedError unless @ptr
        result = Hydra::FFI.hydra_post_print @ptr
        result
      end
      
      # Self test of this class
      def self.test verbose
        verbose = !(0==verbose||!verbose) # boolean
        result = Hydra::FFI.hydra_post_test verbose
        result
      end
    end
    
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
