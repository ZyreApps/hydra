<class
    name = "hydra_client"
    title = "Hydra Client"
    script = "zproto_client_c"
    protocol_class = "hydra_proto"
    package_dir = "../include"
    project_header = "hydra_classes.h"
    >
    This a Hydra client implementation. It talks to the server peer,
    synchronizes all posts, and then terminates.
    <include filename = "../license.xml" />

    <state name = "start">
        <event name = "constructor" next = "expect hello ok">
            <action name = "connect to server endpoint" />
            <action name = "set client identity" />
            <action name = "use connect timeout" />
            <action name = "send" message = "HELLO" />
        </event>
        <event name = "bad endpoint">
            <action name = "signal bad endpoint" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "expect hello ok" inherit = "defaults">
        <event name = "HELLO OK" next = "expect status ok">
            <action name = "use response timeout" />
            <action name = "load peer config data" />
            <action name = "send" message = "STATUS" />
        </event>
    </state>

    <state name = "expect status ok" inherit = "defaults">
        <event name = "STATUS OK" next = "connected">
            <action name = "signal connected" />
        </event>
    </state>

    <state name = "connected" inherit = "defaults">
    </state>
    
<!--        <event name = "fetch" next = "expect get post ok">
            <action name = "prepare to get last post" />
            <action name = "send" message = "GET POST" />
        </event>
        <event name = "have post" next = "finished">
            <action name = "signal success" />
        </event>
        <event name = "got nothing" next = "finished">
            <action name = "signal success" />
        </event>
    </state>

    <state name = "expect get post ok" inherit = "defaults">
        <event name = "GET POST OK">
            <action name = "store the post" />
            <action name = "prepare to get previous post" />
            <action name = "send" message = "GET POST" />
        </event>
        <event name = "have post" next = "finished">
            <action name = "signal success" />
        </event>
    </state>
-->
<!--
    <state name = "finished" inherit = "defaults">
    </state>
    -->
    
    <state name = "defaults">
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
        <event name = "destructor" next = "expect goodbye ok">
            <action name = "send" message = "GOODBYE" />
        </event>
        <event name = "*">
            <action name = "signal internal error" />
            <action name = "terminate" />
        </event>
    </state>
    
    <state name = "expect goodbye ok" inherit = "defaults">
        <event name = "GOODBYE OK">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
        <event name = "expired">
            <action name = "signal incomplete" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "constructor" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful.
        <field name = "endpoint" type = "string" />
        <field name = "timeout" type = "number" size = "4" />
        <accept reply = "CONNECTED" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "CONNECTED">
        <field name = "status" type = "integer" />
        <field name = "older" type = "number" size = "4" />
        <field name = "newer" type = "number" size = "4" />
    </reply>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

<!--    <method name = "fetch" return = "status">
    Fetch all available posts from server, starting with most recent,
    and working backwards, until there are no more posts, or the server
    disappears.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>
-->
    <reply name = "SUCCESS">
        <field name = "status" type = "integer" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "integer" />
        <field name = "reason" type = "string" />
    </reply>
</class>
