<class
    name = "hydra_client"
    title = "Hydra Client"
    script = "zproto_client_c"
    protocol_class = "hydra_proto"
    package_dir = "../include"
    project_header = "hydra_classes.h"
    >
    This a Hydra client implementation. It talks to the server peer,
    synchronizes all posts, and then terminates.
    <include filename = "../license.xml" />

    <state name = "start">
        <event name = "constructor" next = "expect hello ok">
            <action name = "connect to server endpoint" />
            <action name = "set client identity" />
            <action name = "use connect timeout" />
            <action name = "send" message = "HELLO" />
        </event>
        <event name = "bad endpoint">
            <action name = "signal bad endpoint" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "expect hello ok" inherit = "defaults">
        <event name = "HELLO OK" next = "connected">
            <action name = "use response timeout" />
            <action name = "signal connected" />
        </event>
    </state>

    <state name = "connected" inherit = "defaults">
        <event name = "sync" next = "have peer status">
            <action name = "signal success" />
            <action name = "check peer status" />
        </event>
    </state>

    <state name = "have peer status">
        <event name = "new peer" next = "scanning backwards">
            <action name = "prepare to fetch newest post" />
            <action name = "send" message = "NEXT OLDER" />
        </event>
        <event name = "known peer" next = "scanning forwards">
            <action name = "prepare to fetch newer post" />
            <action name = "send" message = "NEXT NEWER" />
        </event>
    </state>

    <!-- We're scanning backwards from newer to older posts; it's a little
         nasty to handle these different commands in the same state, as we
         can't handle invalid server commands. It keeps things simpler. -->
    <state name = "scanning backwards" inherit = "defaults">
        <event name = "NEXT OK">
            <action name = "use this post as oldest" />
            <action name = "skip post if duplicate" />
            <action name = "send" message = "META" />
        </event>
        <event name = "NEXT EMPTY" next = "connected">
            <action name = "signal sync success" />
        </event>
        <event name = "META OK">
            <action name = "store post metadata" />
            <action name = "prepare to get first chunk" />
            <action name = "send" message = "CHUNK" />
        </event>
        <event name = "CHUNK OK">
            <!-- Assume one chunk per content for now -->
            <action name = "store post content chunk" />
            <action name = "store complete post" />
            <action name = "save peer configuration" />
            <action name = "send" message = "NEXT OLDER" />
        </event>
        <event name = "duplicate">
            <action name = "send" message = "NEXT OLDER" />
        </event>
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
    </state>
    
    <!-- We're catching up with newer posts -->
    <state name = "scanning forwards" inherit = "defaults">
        <event name = "NEXT OK">
            <action name = "use this post as newest" />
            <action name = "skip post if duplicate" />
            <action name = "send" message = "META" />
        </event>
        <event name = "NEXT EMPTY" next = "scanning backwards">
            <action name = "prepare to fetch older post" />
            <action name = "send" message = "NEXT OLDER" />
        </event>
        <event name = "META OK">
            <action name = "store post metadata" />
            <action name = "prepare to get first chunk" />
            <action name = "send" message = "CHUNK" />
        </event>
        <event name = "CHUNK OK">
            <!-- Assume one chunk per content for now -->
            <action name = "store post content chunk" />
            <action name = "store complete post" />
            <action name = "save peer configuration" />
            <action name = "send" message = "NEXT NEWER" />
        </event>
        <event name = "duplicate">
            <action name = "send" message = "NEXT NEWER" />
        </event>
    </state>

    <state name = "defaults">
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
        <event name = "destructor" next = "expect goodbye ok">
            <action name = "send" message = "GOODBYE" />
        </event>
        <event name = "error">
            <action name = "signal unexpected server reply" />
            <action name = "terminate" />
        </event>
        <event name = "*">
            <action name = "signal internal error" />
            <action name = "terminate" />
        </event>
    </state>
    
    <state name = "expect goodbye ok" inherit = "defaults">
        <event name = "GOODBYE OK">
            <action name = "signal success" />
            <action name = "save peer configuration" />
            <action name = "terminate" />
        </event>
        <event name = "*">
            <!-- Ignore anything else the server may send us -->
        </event>
        <event name = "expired">
            <action name = "signal expired" />
            <action name = "save peer configuration" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "constructor" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful. The sink
    endpoint is provided by the node's own server, for storing received posts.
        <field name = "endpoint" type = "string" />
        <field name = "timeout" type = "number" size = "4" />
        <accept reply = "CONNECTED" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "CONNECTED">
        <field name = "status" type = "integer" />
        <field name = "nickname" type = "string" />
    </reply>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SUCCESS">
        <field name = "status" type = "integer" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "integer" />
        <field name = "reason" type = "string" />
    </reply>
    
    <method name = "sync" return = "status">
    Start synchronization with server. This method returns immediately, and
    then signals progress via the msgpipe socket, with POST, SUCCESS, and
    FAILED commands.
        <accept reply = "SUCCESS" />
    </method>
</class>
