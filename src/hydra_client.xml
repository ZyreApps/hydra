<class
    name = "hydra_client"
    title = "Hydra Client"
    script = "zproto_client_c"
    protocol_class = "hydra_proto"
    package_dir = "../include"
    project_header = "hydra_classes.h"
    >
    This a Hydra client implementation. It talks to the server peer,
    synchronizes all posts, and then terminates.
    <include filename = "../license.xml" />

    <state name = "start">
        <event name = "constructor" next = "expect hello ok">
            <action name = "connect to server endpoint" />
            <action name = "set client identity" />
            <action name = "use connect timeout" />
            <action name = "send" message = "HELLO" />
        </event>
        <event name = "bad endpoint">
            <action name = "signal bad endpoint" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "expect hello ok" inherit = "defaults">
        <event name = "HELLO OK" next = "expect status ok">
            <action name = "use response timeout" />
            <action name = "store peer id and nickname" />
            <action name = "prepare to request status" />
            <action name = "send" message = "STATUS" />
        </event>
    </state>

    <state name = "expect status ok" inherit = "defaults">
        <event name = "STATUS OK" next = "connected">
            <action name = "signal connected" />
        </event>
    </state>

    <state name = "connected" inherit = "defaults">
        <!-- API method to fetch older, newer, or fresh post -->
        <event name = "fetch" next = "expect header ok">
            <action name = "prepare to fetch header" />
            <action name = "send" message = "HEADER" />
        </event>
    </state>

    <state name = "expect header ok" inherit = "defaults">
        <event name = "HEADER OK" next = "expect chunk ok">
            <action name = "store post metadata" />
            <action name = "prepare to get first chunk" />
            <action name = "send" message = "CHUNK" />
        </event>
        <event name = "HEADER EMPTY" next = "connected">
            <action name = "signal no data" />
        </event>
        <event name = "post exists" next = "connected">
            <action name = "signal post skipped" />
        </event>
    </state>

    <state name = "expect chunk ok" inherit = "defaults">
        <event name = "CHUNK OK" next = "expect chunk ok">
            <action name = "store post data chunk" />
            <action name = "prepare to get next chunk" />
            <action name = "send" message = "CHUNK" />
        </event>
        <event name = "finished" next = "connected">
            <action name = "signal post fetched" />
            <action name = "store the post in ledger" />
            <action name = "save peer configuration" />
        </event>
    </state>

    <state name = "defaults">
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
        <event name = "destructor" next = "expect goodbye ok">
            <action name = "send" message = "GOODBYE" />
        </event>
        <event name = "error">
            <action name = "signal unexpected server reply" />
            <action name = "terminate" />
        </event>
        <event name = "*">
            <action name = "signal internal error" />
            <action name = "terminate" />
        </event>
    </state>
    
    <state name = "expect goodbye ok" inherit = "defaults">
        <event name = "GOODBYE OK">
            <action name = "signal success" />
            <action name = "save peer configuration" />
            <action name = "terminate" />
        </event>
        <event name = "expired">
            <action name = "signal incomplete" />
            <action name = "save peer configuration" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "constructor" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful. The sink
    endpoint is provided by the node's own server, for storing received posts.
        <field name = "peer endpoint" type = "string" />
        <field name = "sink endpoint" type = "string" />
        <field name = "timeout" type = "number" size = "4" />
        <accept reply = "CONNECTED" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "CONNECTED">
        <field name = "status" type = "integer" />
        <field name = "before" type = "number" size = "4" />
        <field name = "after" type = "number" size = "4" />
    </reply>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SUCCESS">
        <field name = "status" type = "integer" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "integer" />
        <field name = "reason" type = "string" />
    </reply>
    
    <method name = "fetch" return = "status">
    Fetch a post from the server. Fetches either a newer post, an older post,
    or a fresh post (from newest backwards). Returns 0 if OK, -1 if there was
    no post to fetch, or another error.
    disappears.
        <field name = "which" type = "integer" />
        <accept reply = "FETCHED" />
        <accept reply = "SKIPPED" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "FETCHED">
        <field name = "status" type = "integer" />
        <field name = "ident" type = "string">Post identifier</field>
        <field name = "subject" type = "longstr">Subject line</field>
        <field name = "timestamp" type = "string">Post creation timestamp</field>
        <field name = "parent id" type = "string">Parent post ID, if any</field>
        <field name = "mime type" type = "string">Content type</field>
        <field name = "content size" type = "number" size = "8">Content size, octets</field>
    </reply>

    <!-- Client already has this post -->
    <reply name = "SKIPPED">
        <field name = "status" type = "integer" />
    </reply>
</class>
