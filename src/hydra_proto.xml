<class
    name = "hydra_proto"
    title = "The Hydra Protocol"
    script = "zproto_codec_c"
    package_dir = "../include"
    >
    <include filename = "../license.xml" />

    <grammar>
    hydra = hello *( get-post ) [ goodbye ]
    hello = c:hello ( s:hello-ok / s:invalid / s:failed )
    get-post = c:get-post ( s:get-post-ok / s:invalid / s:failed )
    goodbye = c:goodbye ( s:goodbye-ok / s:invalid / s:failed )
    </grammar>

    <message name = "hello">
        Open new connection, provide client credentials.
        <field name = "identity" type = "string">Client identity</field>
        <field name = "nickname" type = "string">Client nickname</field>
    </message>

    <message name = "hello ok">
        Accept new connection, provide server credentials.
        <field name = "identity" type = "string">Server identity</field>
        <field name = "nickname" type = "string">Server nickname</field>
    </message>

    <message name = "status">
        Client requests server status update, telling server the oldest and
        newest post that it knows for that server. If the client never
        received any posts from the server, these fields are empty.
        <field name = "oldest" type = "string">Oldest post</field>
        <field name = "newest" type = "string">Newest post</field>
    </message>

    <message name = "status ok">
        Server tells client how many posts it has, older and newer than the
        range the client already knows.
        <field name = "before" type = "number" size = "4">Number of posts before oldest</field>
        <field name = "after" type = "number" size = "4">Newest of posts after newest</field>
    </message>

    <!-- Position requests -->
    <define name = "FETCH OLDER" value = "1">Fetch next older post</define>
    <define name = "FETCH NEWER" value = "2">Fetch next newer post</define>
    <define name = "FETCH RESET" value = "3">Fetch newest post (then fetch older)</define>
    
    <message name = "header">
        Client requests a post from the server, requesting either an older post
        (previous to the oldest post it already has), a newer post (following the
        newest post it has), or a fresh post (server's latest post, ignoring all
        status).
        <field name = "which" type = "number" size = "1">Which post to fetch</field>
    </message>

    <message name = "header ok">
        Return a post's metadata.
        <field name = "ident" type = "string">Post identifier</field>
        <field name = "subject" type = "longstr">Subject line</field>
        <field name = "timestamp" type = "string">Post creation timestamp</field>
        <field name = "parent id" type = "string">Parent post ID, if any</field>
        <field name = "digest" type = "string">Content SHA1 digest</field>
        <field name = "mime type" type = "string">Content MIME type</field>
        <field name = "content size" type = "number" size = "8">Content size, octets</field>
    </message>

    <message name = "header empty">
        Server does not have a post to give to the client.
    </message>
    
    <message name = "chunk">
        Client fetches a chunk of content data from the server. This command
        always applies to the post returned by a HEADER-OK. The 
        <field name = "offset" type = "number" size = "8">Chunk offset in file</field>
        <field name = "octets" type = "number" size = "4">Maximum chunk size to fetch</field>
    </message>

    <message name = "chunk ok">
        Return a chunk of post content.
        <field name = "offset" type = "number" size = "8">Chunk offset in file</field>
        <field name = "content" type = "chunk">Content data chunk</field>
    </message>

    <message name = "goodbye">
        Close the connection politely
    </message>

    <message name = "goodbye ok">
        Handshake a connection close
    </message>

    <message name = "error">
        Command failed for some specific reason
        <field name = "status" type = "number" size = "2">3-digit status code</field>
        <field name = "reason" type = "string">Printable explanation</field>
    </message>

    <!-- Success codes -->
    <define name = "SUCCESS" value = "200" />
    <define name = "STORED" value = "201" />
    <define name = "DELIVERED" value = "202" />

    <!-- Temporary errors -->
    <define name = "NOT DELIVERED" value = "300" />
    <define name = "CONTENT TOO LARGE" value = "301" />
    <define name = "TIMEOUT EXPIRED" value = "302" />
    <define name = "CONNECTION REFUSED" value = "303" />

    <!-- Application errors -->
    <define name = "RESOURCE LOCKED" value = "400" />
    <define name = "ACCESS REFUSED" value = "401" />
    <define name = "NOT FOUND" value = "404" />

    <!-- System errors -->
    <define name = "COMMAND INVALID" value = "500" />
    <define name = "NOT IMPLEMENTED" value = "501" />
    <define name = "INTERNAL ERROR" value = "502" />
</class>
